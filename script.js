// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const textInput = document.getElementById('text-input');
const generateBtn = document.getElementById('generate-btn');
const qrSize = document.getElementById('qr-size');
const qrColor = document.getElementById('qr-color');
const resultSection = document.getElementById('result-section');
const qrCanvas = document.getElementById('qr-canvas');
const downloadBtn = document.getElementById('download-btn');
const copyBtn = document.getElementById('copy-btn');

// Excel —ç–ª–µ–º–µ–Ω—Ç—ã
const excelUploadArea = document.getElementById('excel-upload-area');
const excelFileInput = document.getElementById('excel-file-input');
const selectFileBtn = document.getElementById('select-file-btn');
const excelOptions = document.getElementById('excel-options');
const maxRowsSelect = document.getElementById('max-rows');
const excelQrSize = document.getElementById('excel-qr-size');
const excelQrColor = document.getElementById('excel-qr-color');
const processExcelBtn = document.getElementById('process-excel-btn');
const excelProgress = document.getElementById('excel-progress');
const progressFill = document.getElementById('progress-fill');
const progressText = document.getElementById('progress-text');

// Multiple results —ç–ª–µ–º–µ–Ω—Ç—ã
const multipleResultsSection = document.getElementById('multiple-results-section');
const totalQrCodes = document.getElementById('total-qr-codes');
const totalRows = document.getElementById('total-rows');
const qrGrid = document.getElementById('qr-grid');
const downloadAllBtn = document.getElementById('download-all-btn');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentQRCode = null;
let excelData = null;
let generatedQRCodes = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qrcode.js
    if (typeof QRCode === 'undefined') {
        console.error('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
        showNotification('–û—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        const reloadBtn = document.createElement('button');
        reloadBtn.textContent = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É';
        reloadBtn.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 16px 32px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            cursor: pointer;
            z-index: 10000;
        `;
        reloadBtn.onclick = () => location.reload();
        document.body.appendChild(reloadBtn);
        return;
    }
    
    console.log('qrcode.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ:', typeof QRCode);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏:', {
        L: QRCode.CorrectLevel.L,
        M: QRCode.CorrectLevel.M,
        Q: QRCode.CorrectLevel.Q,
        H: QRCode.CorrectLevel.H
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ XLSX
    if (typeof XLSX === 'undefined') {
        console.warn('XLSX –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - Excel —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    } else {
        console.log('XLSX –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', typeof XLSX);
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:', XLSX.SSF ? 'SSF' : '–Ω–µ—Ç SSF');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ JSZip
    if (typeof JSZip === 'undefined') {
        console.warn('JSZip –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - ZIP –∞—Ä—Ö–∏–≤—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    } else {
        console.log('JSZip –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', typeof JSZip);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ QR-–∫–æ–¥–∞
    generateBtn.addEventListener('click', generateQRCode);
    textInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && e.ctrlKey) {
            generateQRCode();
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    textInput.addEventListener('input', function() {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π QR-–∫–æ–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
        if (currentQRCode) {
            currentQRCode = null;
            if (qrCanvas) {
                const ctx = qrCanvas.getContext('2d');
                ctx.clearRect(0, 0, qrCanvas.width, qrCanvas.height);
            }
            resultSection.style.display = 'none';
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    qrSize.addEventListener('change', function() {
        if (currentQRCode && textInput.value.trim()) {
            console.log('–†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥...');
            generateQRCode();
        }
    });
    
    qrColor.addEventListener('change', function() {
        if (currentQRCode && textInput.value.trim()) {
            console.log('–¶–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥...');
            generateQRCode();
        }
    });
    
    document.getElementById('qr-error-correction').addEventListener('change', function() {
        if (currentQRCode && textInput.value.trim()) {
            console.log('–£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥...');
            generateQRCode();
        }
    });
    
    downloadBtn.addEventListener('click', downloadQRCode);
    copyBtn.addEventListener('click', copyQRCode);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Excel —Ñ–∞–π–ª–æ–≤
    selectFileBtn.addEventListener('click', () => excelFileInput.click());
    excelFileInput.addEventListener('change', handleFileSelect);
    processExcelBtn.addEventListener('click', processExcelFile);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Excel –æ–ø—Ü–∏–π
    document.getElementById('rows-per-qr').addEventListener('change', updateExcelPreview);
    maxRowsSelect.addEventListener('change', updateExcelPreview);
    
    // –î–æ–±–∞–≤–ª—è–µ–º drag & drop –¥–ª—è Excel —Ñ–∞–π–ª–æ–≤
    setupDragAndDrop();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    generateBtn.addEventListener('mouseenter', function() {
        this.style.transform = 'translateY(-2px) scale(1.02)';
    });
    
    generateBtn.addEventListener('mouseleave', function() {
        this.style.transform = 'translateY(0) scale(1)';
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º placeholder —Å –ø—Ä–∏–º–µ—Ä–æ–º
    textInput.addEventListener('focus', function() {
        if (this.value === '') {
            this.placeholder = '–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.google.com –∏–ª–∏ "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"';
        }
    });
    
    textInput.addEventListener('blur', function() {
        this.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫—É –∏–ª–∏ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞...';
    });
    
    console.log('–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã');
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop
function setupDragAndDrop() {
    excelUploadArea.addEventListener('dragover', function(e) {
        e.preventDefault();
        this.classList.add('dragover');
    });
    
    excelUploadArea.addEventListener('dragleave', function(e) {
        e.preventDefault();
        this.classList.remove('dragover');
    });
    
    excelUploadArea.addEventListener('drop', function(e) {
        e.preventDefault();
        this.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFile(files[0]);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
function handleFileSelect(e) {
    const file = e.target.files[0];
    if (file) {
        handleFile(file);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
function handleFile(file) {
    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª:', file.name, '—Ä–∞–∑–º–µ—Ä:', file.size);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!file.name.match(/\.(xlsx|xls|csv)$/)) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª (.xlsx, .xls) –∏–ª–∏ CSV —Ñ–∞–π–ª (.csv)', 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ XLSX –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if (typeof XLSX === 'undefined') {
        showNotification('–û—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
        return;
    }
    
    const reader = new FileReader();
    
    reader.onload = function(e) {
        try {
            console.log('–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
            
            let workbook, firstSheet, jsonData;
            
            if (file.name.endsWith('.csv')) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–∞
                const csvText = e.target.result;
                console.log('CSV —Ç–µ–∫—Å—Ç:', csvText.substring(0, 200) + '...');
                
                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π div –¥–ª—è XLSX
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = csvText;
                document.body.appendChild(tempDiv);
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CSV –≤ JSON
                jsonData = XLSX.utils.sheet_to_json(
                    XLSX.utils.aoa_to_sheet(
                        csvText.split('\n').map(row => row.split(','))
                    ), 
                    { header: 1 }
                );
                
                document.body.removeChild(tempDiv);
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞
                const data = new Uint8Array(e.target.result);
                console.log('Excel –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ä–∞–∑–º–µ—Ä:', data.length);
                
                workbook = XLSX.read(data, { 
                    type: 'array',
                    cellDates: true,
                    cellNF: false,
                    cellText: false
                });
                
                console.log('Workbook —Å–æ–∑–¥–∞–Ω, –ª–∏—Å—Ç—ã:', workbook.SheetNames);
                
                firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                if (!firstSheet) {
                    throw new Error('–ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ');
                }
                
                console.log('–ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–∏–∞–ø–∞–∑–æ–Ω:', firstSheet['!ref']);
                
                jsonData = XLSX.utils.sheet_to_json(firstSheet, { 
                    header: 1,
                    defval: '',
                    blankrows: false
                });
            }
            
            console.log('JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Å—Ç—Ä–æ–∫:', jsonData.length);
            console.log('–ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:', jsonData.slice(0, 3));
            
            if (!jsonData || jsonData.length === 0) {
                showNotification('–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö', 'error');
                return;
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            jsonData = jsonData.filter(row => 
                row && row.length > 0 && 
                row.some(cell => cell !== '' && cell !== null && cell !== undefined)
            );
            
            if (jsonData.length === 0) {
                showNotification('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫', 'error');
                return;
            }
            
            excelData = jsonData;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            const rowsPerQr = parseInt(document.getElementById('rows-per-qr').value);
            const maxRows = parseInt(maxRowsSelect.value);
            const estimatedQRCodes = Math.ceil(Math.min(excelData.length, maxRows) / rowsPerQr);
            
            showNotification(`–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${excelData.length} —Å—Ç—Ä–æ–∫`, 'success');
            excelOptions.style.display = 'grid';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            updateExcelPreview();
            
            console.log('Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message, error.stack);
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error.message, 'error');
        }
    };
    
    reader.onerror = function(error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞', 'error');
    };
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ ArrayBuffer –¥–ª—è Excel –∏–ª–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è CSV
    if (file.name.endsWith('.csv')) {
        reader.readAsText(file, 'UTF-8');
    } else {
        reader.readAsArrayBuffer(file);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞
async function processExcelFile() {
    if (!excelData) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª', 'warning');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const rowsPerQrElement = document.getElementById('rows-per-qr');
    const maxRowsElement = document.getElementById('max-rows');
    const excelQrSizeElement = document.getElementById('excel-qr-size');
    const excelQrColorElement = document.getElementById('excel-qr-color');
    const errorCorrectionElement = document.getElementById('qr-error-correction');
    
    if (!rowsPerQrElement || !maxRowsElement || !excelQrSizeElement || !excelQrColorElement || !errorCorrectionElement) {
        showNotification('–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–π–¥–µ–Ω—ã', 'error');
        return;
    }
    
    const rowsPerQr = parseInt(rowsPerQrElement.value);
    const maxRows = parseInt(maxRowsElement.value);
    const size = parseInt(excelQrSizeElement.value);
    const color = excelQrColorElement.value;
    const errorCorrection = errorCorrectionElement.value;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if (rowsPerQr > maxRows) {
        showNotification(`–û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫ –≤ QR-–∫–æ–¥–µ (${rowsPerQr}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ (${maxRows})`, 'error');
        return;
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –ª–∏–º–∏—Ç–æ–≤
    if (maxRows >= 5000) {
        const confirmLargeFile = confirm(`‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç: ${maxRows} —Å—Ç—Ä–æ–∫.\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏.\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`);
        if (!confirmLargeFile) {
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        showNotification(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ (${maxRows} —Å—Ç—Ä–æ–∫). –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`, 'warning');
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (!excelProgress || !progressFill || !progressText) {
            showNotification('–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
            return;
        }
        
        processExcelBtn.disabled = true;
        excelProgress.style.display = 'block';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (!resultSection || !multipleResultsSection) {
            console.warn('–°–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            resultSection.style.display = 'none';
            multipleResultsSection.style.display = 'none';
        }
        
        console.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Excel —Ñ–∞–π–ª–∞:`);
        console.log(`- –°—Ç—Ä–æ–∫ –≤ –æ–¥–Ω–æ–º QR-–∫–æ–¥–µ: ${rowsPerQr}`);
        console.log(`- –û–±—â–∏–π –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫: ${maxRows}`);
        console.log(`- –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${excelData.length}`);
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ rowsPerQr
        const dataGroups = [];
        for (let i = 0; i < Math.min(excelData.length, maxRows); i += rowsPerQr) {
            dataGroups.push(excelData.slice(i, i + rowsPerQr));
        }
        
        console.log(`–°–æ–∑–¥–∞–Ω–æ ${dataGroups.length} –≥—Ä—É–ø–ø –¥–ª—è QR-–∫–æ–¥–æ–≤`);
        
        generatedQRCodes = [];
        let processedGroups = 0;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
        for (let i = 0; i < dataGroups.length; i++) {
            const group = dataGroups[i];
            const groupText = group.map(row => row.join(' | ')).join('\n');
            
            console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É ${i + 1}/${dataGroups.length}: —Å—Ç—Ä–æ–∫–∏ ${i * rowsPerQr + 1}-${Math.min((i + 1) * rowsPerQr, excelData.length)}`);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π QR-–∫–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã
            const qrCodeDataURL = await generateRealQRCode(groupText, size, color, errorCorrection);
            generatedQRCodes.push({
                dataURL: qrCodeDataURL,
                rows: group.length,
                startRow: i * rowsPerQr + 1,
                endRow: Math.min((i + 1) * rowsPerQr, excelData.length)
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            processedGroups++;
            const progress = (processedGroups / dataGroups.length) * 100;
            progressFill.style.width = progress + '%';
            progressText.textContent = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedGroups} –∏–∑ ${dataGroups.length} –≥—Ä—É–ø–ø...`;
            
            // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            if (maxRows >= 5000) {
                // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                await new Promise(resolve => setTimeout(resolve, 10));
            } else if (maxRows >= 1000) {
                // –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ - –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                await new Promise(resolve => setTimeout(resolve, 50));
            } else {
                // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        showMultipleResults(size);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞:', error);
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ' + error.message, 'error');
    } finally {
        processExcelBtn.disabled = false;
        excelProgress.style.display = 'none';
    }
}

// –ü–æ–∫–∞–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showMultipleResults(size) {
    // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (!size) {
        size = parseInt(document.getElementById('excel-qr-size').value);
    }
    
    console.log('showMultipleResults –≤—ã–∑–≤–∞–Ω–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º:', size);
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–æ–≤:', generatedQRCodes.length);
    console.log('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:', excelData.length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!totalQrCodes || !totalRows || !qrGrid || !multipleResultsSection) {
        console.error('–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    totalQrCodes.textContent = generatedQRCodes.length;
    totalRows.textContent = excelData.length;
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
    qrGrid.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º QR-–∫–æ–¥—ã –≤ —Å–µ—Ç–∫—É
    generatedQRCodes.forEach((qrCode, index) => {
        try {
            const qrItem = document.createElement('div');
            qrItem.className = 'qr-item';
            
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
            const img = new Image();
            img.onload = function() {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
            };
            img.src = qrCode.dataURL;
            
            const info = document.createElement('div');
            info.className = 'qr-item-info';
            info.innerHTML = `
                <div class="qr-range">–°—Ç—Ä–æ–∫–∏ ${qrCode.startRow}-${qrCode.endRow}</div>
                <div class="qr-count">${qrCode.rows} —Å—Ç—Ä–æ–∫</div>
                <div class="qr-size">${size}x${size}px</div>
            `;
            
            qrItem.appendChild(canvas);
            qrItem.appendChild(info);
            qrGrid.appendChild(qrItem);
            
            console.log(`QR-–∫–æ–¥ ${index + 1} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Ç–∫—É: —Å—Ç—Ä–æ–∫–∏ ${qrCode.startRow}-${qrCode.endRow}, —Ä–∞–∑–º–µ—Ä ${size}x${size}`);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ QR-–∫–æ–¥–∞ ${index + 1}:`, error);
        }
    });
    
    multipleResultsSection.style.display = 'block';
    multipleResultsSection.scrollIntoView({ behavior: 'smooth', block: 'center' });
    
    showNotification(`–°–æ–∑–¥–∞–Ω–æ ${generatedQRCodes.length} QR-–∫–æ–¥–æ–≤!`, 'success');
    
    console.log('showMultipleResults –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö QR-–∫–æ–¥–æ–≤
downloadAllBtn.addEventListener('click', async function() {
    if (generatedQRCodes.length === 0) {
        showNotification('–ù–µ—Ç QR-–∫–æ–¥–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', 'warning');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ JSZip –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if (typeof JSZip === 'undefined') {
        showNotification('–û—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ JSZip –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
        return;
    }
    
    try {
        this.disabled = true;
        this.innerHTML = '<span class="btn-icon">‚è≥</span> –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤...';
        
        console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞...');
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:', generatedQRCodes.length);
        
        const zip = new JSZip();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π QR-–∫–æ–¥ –≤ –∞—Ä—Ö–∏–≤
        generatedQRCodes.forEach((qrCode, index) => {
            try {
                const fileName = `qr-code-${index + 1}-rows-${qrCode.startRow}-${qrCode.endRow}.png`;
                console.log(`–î–æ–±–∞–≤–ª—è–µ–º –≤ –∞—Ä—Ö–∏–≤: ${fileName}`);
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º data URL –≤ blob
                if (qrCode.dataURL && qrCode.dataURL.startsWith('data:image/')) {
                    const base64Data = qrCode.dataURL.split(',')[1];
                    if (base64Data) {
                        zip.file(fileName, base64Data, { base64: true });
                        console.log(`–§–∞–π–ª ${fileName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤`);
                    } else {
                        console.warn(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${fileName}: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ`);
                    }
                } else {
                    console.warn(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${fileName}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç data URL`);
                }
            } catch (fileError) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${index + 1}:`, fileError);
            }
        });
        
        console.log('–í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ZIP...');
        
        // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        const zipBlob = await zip.generateAsync({ 
            type: 'blob',
            compression: 'DEFLATE',
            compressionOptions: { level: 6 }
        });
        
        console.log('ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:', zipBlob.size, '–±–∞–π—Ç');
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const link = document.createElement('a');
        link.href = URL.createObjectURL(zipBlob);
        link.download = `qr-codes-${Date.now()}.zip`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–π
        document.body.appendChild(link);
        link.click();
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É
        setTimeout(() => {
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
        }, 100);
        
        showNotification(`–í—Å–µ QR-–∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã! –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: ${(zipBlob.size / 1024).toFixed(1)} –ö–ë`, 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞:', error);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message, error.stack);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: ' + error.message, 'error');
    } finally {
        this.disabled = false;
        this.innerHTML = '<span class="btn-icon">üì¶</span> –°–∫–∞—á–∞—Ç—å –≤—Å–µ QR-–∫–æ–¥—ã (ZIP)';
    }
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
async function generateQRCode() {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–∞...');
    
    const text = textInput.value.trim();
    
    if (!text) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É', 'error');
        textInput.focus();
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        generateBtn.disabled = true;
        generateBtn.innerHTML = '<span class="btn-icon">‚è≥</span> –ì–µ–Ω–µ—Ä–∏—Ä—É—é...';
        
        const size = parseInt(qrSize.value);
        const color = qrColor.value;
        const errorCorrection = document.getElementById('qr-error-correction').value;
        
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', { text, size, color, errorCorrection });
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (qrCanvas) {
            const ctx = qrCanvas.getContext('2d');
            ctx.clearRect(0, 0, qrCanvas.width, qrCanvas.height);
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π QR-–∫–æ–¥
        const qrCodeDataURL = await generateRealQRCode(text, size, color, errorCorrection);
        
        console.log('QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞ data URL:', qrCodeDataURL.length);
        console.log('–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', qrCodeDataURL.substring(0, 100));
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        displayQRCode(qrCodeDataURL);
        currentQRCode = qrCodeDataURL;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        showNotification('QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!', 'success');
        
        // –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        resultSection.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: ' + error.message, 'error');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        generateBtn.disabled = false;
        generateBtn.innerHTML = '<span class="btn-icon">‚ö°</span> –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å';
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qrcode.js
async function generateRealQRCode(text, size, color, errorCorrection = 'M') {
    return new Promise((resolve, reject) => {
        try {
            console.log('–°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qrcode.js...');
            console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { text, size, color, errorCorrection });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode.js –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            if (typeof QRCode === 'undefined') {
                reject(new Error('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'));
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π div –¥–ª—è QR-–∫–æ–¥–∞
            const tempDiv = document.createElement('div');
            tempDiv.style.position = 'absolute';
            tempDiv.style.left = '-9999px';
            tempDiv.style.top = '-9999px';
            document.body.appendChild(tempDiv);
            
            try {
                // –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é qrcode.js
                const qrCode = new QRCode(tempDiv, {
                    text: text,
                    width: size,
                    height: size,
                    colorDark: color,
                    colorLight: '#FFFFFF',
                    correctLevel: getCorrectLevel(errorCorrection),
                    margin: 4
                });
                
                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è
                setTimeout(() => {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º canvas –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞
                        const canvas = tempDiv.querySelector('canvas');
                        if (canvas) {
                            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas –≤ data URL
                            const dataURL = canvas.toDataURL('image/png');
                            console.log('QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é qrcode.js, –¥–ª–∏–Ω–∞ data URL:', dataURL.length);
                            
                            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π div
                            document.body.removeChild(tempDiv);
                            
                            resolve(dataURL);
                        } else {
                            throw new Error('Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º QR-–∫–æ–¥–µ');
                        }
                    } catch (error) {
                        document.body.removeChild(tempDiv);
                        reject(error);
                    }
                }, 100);
                
            } catch (error) {
                document.body.removeChild(tempDiv);
                reject(error);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ generateRealQRCode:', error);
            reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥: ' + error.message));
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫ qrcode.js
function getCorrectLevel(level) {
    switch (level) {
        case 'L': return QRCode.CorrectLevel.L; // 7%
        case 'M': return QRCode.CorrectLevel.M; // 15%
        case 'Q': return QRCode.CorrectLevel.Q; // 25%
        case 'H': return QRCode.CorrectLevel.H; // 30%
        default: return QRCode.CorrectLevel.M;
    }
}

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ qrcode.js

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ hex —Ü–≤–µ—Ç–∞ –≤ RGB
function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : { r: 0, g: 0, b: 0 };
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞
function displayQRCode(dataURL) {
    console.log('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º QR-–∫–æ–¥...');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    const img = new Image();
    img.onload = function() {
        console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä—ã:', img.width, 'x', img.height);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
        qrCanvas.width = img.width;
        qrCanvas.height = img.height;
        
        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas
        const ctx = qrCanvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        resultSection.style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
        resultSection.style.opacity = '0';
        resultSection.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            resultSection.style.transition = 'all 0.5s ease';
            resultSection.style.opacity = '1';
            resultSection.style.transform = 'translateY(0)';
        }, 10);
        
        console.log('QR-–∫–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    };
    
    img.onerror = function() {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ QR-–∫–æ–¥–∞', 'error');
    };
    
    img.src = dataURL;
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞
function downloadQRCode() {
    if (!currentQRCode) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥', 'warning');
        return;
    }
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const link = document.createElement('a');
        link.download = `qr-code-${Date.now()}.png`;
        link.href = currentQRCode;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–π
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        showNotification('QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!', 'success');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        downloadBtn.style.transform = 'scale(0.95)';
        setTimeout(() => {
            downloadBtn.style.transform = 'scale(1)';
        }, 150);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
async function copyQRCode() {
    if (!currentQRCode) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥', 'warning');
        return;
    }
    
    try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º data URL –≤ blob
        const response = await fetch(currentQRCode);
        const blob = await response.blob();
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        await navigator.clipboard.write([
            new ClipboardItem({
                [blob.type]: blob
            })
        ]);
        
        showNotification('QR-–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copyBtn.style.transform = 'scale(0.95)';
        setTimeout(() => {
            copyBtn.style.transform = 'scale(1)';
        }, 150);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', type, message);
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">${getNotificationIcon(type)}</span>
            <span class="notification-message">${message}</span>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${getNotificationColor(type)};
        color: white;
        padding: 16px 20px;
        border-radius: 12px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 350px;
        font-weight: 500;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 10);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 4000);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getNotificationIcon(type) {
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è'
    };
    return icons[type] || icons.info;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getNotificationColor(type) {
    const colors = {
        success: '#28a745',
        error: '#dc3545',
        warning: '#ffc107',
        info: '#17a2b8'
    };
    return colors[type] || colors.info;
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationStyles = document.createElement('style');
notificationStyles.textContent = `
    .notification-content {
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    .notification-icon {
        font-size: 1.2rem;
    }
    
    .notification-message {
        flex: 1;
    }
    
    @media (max-width: 480px) {
        .notification {
            right: 10px;
            left: 10px;
            max-width: none;
        }
    }
`;
document.head.appendChild(notificationStyles);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Enter –≤ textarea
textInput.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && e.ctrlKey) {
        e.preventDefault();
        generateQRCode();
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é URL
function isValidURL(string) {
    try {
        new URL(string);
        return true;
    } catch (_) {
        return false;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
textInput.addEventListener('input', function() {
    const text = this.value.trim();
    
    if (text && isValidURL(text)) {
        this.style.borderColor = '#28a745';
        this.style.background = '#f8fff9';
    } else if (text) {
        this.style.borderColor = '#667eea';
        this.style.background = '#f8f9fa';
    } else {
        this.style.borderColor = '#e1e5e9';
        this.style.background = '#f8f9fa';
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è feature cards
const featureCards = document.querySelectorAll('.feature-card');
featureCards.forEach((card, index) => {
    card.style.animationDelay = `${index * 0.1}s`;
    card.style.animation = 'fadeInUp 0.6s ease forwards';
    card.style.opacity = '0';
    card.style.transform = 'translateY(30px)';
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è Excel
function updateExcelPreview() {
    if (excelData && excelData.length > 0) {
        const rowsPerQr = parseInt(document.getElementById('rows-per-qr').value);
        const maxRows = parseInt(maxRowsSelect.value);
        const estimatedQRCodes = Math.ceil(Math.min(excelData.length, maxRows) / rowsPerQr);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        const fileInfo = document.getElementById('excel-file-info');
        if (fileInfo) {
            let infoText = `–ù–∞–π–¥–µ–Ω–æ ${excelData.length} —Å—Ç—Ä–æ–∫. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ ${estimatedQRCodes} QR-–∫–æ–¥–æ–≤`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –ª–∏–º–∏—Ç–æ–≤
            if (maxRows >= 50000) {
                infoText += ` ‚ö†Ô∏è –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (${maxRows} —Å—Ç—Ä–æ–∫)`;
            } else if (maxRows >= 10000) {
                infoText += ` ‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª (${maxRows} —Å—Ç—Ä–æ–∫)`;
            } else if (maxRows >= 5000) {
                infoText += ` ‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —Ñ–∞–π–ª (${maxRows} —Å—Ç—Ä–æ–∫)`;
            }
            
            fileInfo.textContent = infoText;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            if (maxRows >= 10000) {
                fileInfo.style.color = '#dc3545'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö
            } else if (maxRows >= 5000) {
                fileInfo.style.color = '#ffc107'; // –ñ–µ–ª—Ç—ã–π –¥–ª—è –±–æ–ª—å—à–∏—Ö
            } else {
                fileInfo.style.color = '#6c757d'; // –û–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç
            }
        }
        
        console.log(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: ${estimatedQRCodes} QR-–∫–æ–¥–æ–≤ –∏–∑ ${Math.min(excelData.length, maxRows)} —Å—Ç—Ä–æ–∫`);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è feature cards
const featureAnimationStyles = document.createElement('style');
featureAnimationStyles.textContent = `
    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .feature-card {
        animation: fadeInUp 0.6s ease forwards;
    }
`;
document.head.appendChild(featureAnimationStyles);
